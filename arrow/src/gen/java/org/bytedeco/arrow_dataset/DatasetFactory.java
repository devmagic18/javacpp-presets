// Targeted by JavaCPP version 1.5.3: DO NOT EDIT THIS FILE

package org.bytedeco.arrow_dataset;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import org.bytedeco.arrow.*;
import static org.bytedeco.arrow.global.arrow.*;
import org.bytedeco.parquet.*;
import static org.bytedeco.arrow.global.parquet.*;

import static org.bytedeco.arrow.global.arrow_dataset.*;


/** \brief DatasetFactory provides a way to inspect/discover a Dataset's
 *  expected schema before materializing the Dataset and underlying Sources. */
@Namespace("arrow::dataset") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow_dataset.class)
public class DatasetFactory extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DatasetFactory(Pointer p) { super(p); }

  public static native @ByVal DatasetFactoryResult Make(
        @ByVal SourceFactoryVector factories);

  /** \brief Return the list of SourceFactory */
  public native @Const @ByRef SourceFactoryVector factories();

  /** \brief Get the schemas of the Sources. */
  public native @ByVal SchemaVectorResult InspectSchemas();

  /** \brief Get unified schema for the resulting Dataset. */
  public native @ByVal SchemaResult Inspect();

  /** \brief Create a Dataset with the given schema. */
  public native @ByVal DatasetResult Finish(@Const @SharedPtr @ByRef Schema schema);

  /** \brief Create a Dataset using the inspected schema. */
  public native @ByVal DatasetResult Finish();
}
